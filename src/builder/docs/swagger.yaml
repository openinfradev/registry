basePath: '{{.BasePath}}'
definitions:
  model.BasicResult:
    properties:
      code:
        type: string
      message:
        type: string
    type: object
  model.CatalogResult:
    properties:
      repositories:
        items:
          type: string
        type: array
    type: object
  model.DockerBuildByFileParam:
    properties:
      contents:
        type: string
      name:
        type: string
    required:
    - contents
    - name
    type: object
  model.RepositoriesResult:
    properties:
      repositories:
        items:
          $ref: '#/definitions/model.RepositoryResult'
        type: array
    type: object
  model.RepositoryResult:
    properties:
      name:
        type: string
      tags:
        items:
          type: string
        type: array
    type: object
host: '{{.Host}}'
info:
  contact: {}
  description: '{{.Description}}'
  license: {}
  title: '{{.Title}}'
  version: '{{.Version}}'
paths:
  /docker/build/file:
    post:
      consumes:
      - application/json
      description: docker build by dockerfile api
      parameters:
      - description: Json Parameters (contents is base64 encoded)
        in: body
        name: contents
        required: true
        schema:
          $ref: '#/definitions/model.DockerBuildByFileParam'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.BasicResult'
      summary: docker build by dockerfile
  /docker/build/git:
    post:
      description: docker build by git api
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.BasicResult'
      summary: docker build by git
  /docker/push:
    put:
      description: docker image push
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.BasicResult'
      summary: docker image push
  /docker/tag:
    patch:
      description: docker image tag
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.BasicResult'
      summary: docker image tag
  /health:
    get:
      description: builder의 health를 체크할 목적의 api
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.BasicResult'
      summary: health check api
  /registry/catalog:
    get:
      description: docker registry catalog api
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.CatalogResult'
      summary: docker registry catalog api
  /registry/repositories/{name}:
    delete:
      description: docker registry repository delete api
      parameters:
      - default: ""
        description: Repository Name
        in: path
        name: name
        required: true
        type: string
      - description: Tag Name
        in: query
        name: tag
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.BasicResult'
      summary: docker registry repository delete api
    get:
      description: docker registry repositories api
      parameters:
      - default: ""
        description: Repository Name
        in: path
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.RepositoryResult'
      summary: docker registry repositories api
swagger: "2.0"
